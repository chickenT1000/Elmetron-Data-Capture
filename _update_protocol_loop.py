from pathlib import Path

path = Path("elmetron/protocols/registry.py")
text = path.read_text(encoding="ascii")
old = "        for name, data in payload.items():\r\n            if not isinstance(data, dict):\r\n                continue\r\n            profile = ProtocolProfile(\r\n                name=name,\r\n                description=data.get(\"description\"),\r\n                poll_hex=data.get(\"poll_hex\"),\r\n                poll_interval_s=data.get(\"poll_interval_s\"),\r\n                baud=data.get(\"baud\"),\r\n                data_bits=data.get(\"data_bits\"),\r\n                stop_bits=data.get(\"stop_bits\"),\r\n                parity=data.get(\"parity\"),\r\n                latency_timer_ms=data.get(\"latency_timer_ms\"),\r\n                read_timeout_ms=data.get(\"read_timeout_ms\"),\r\n                write_timeout_ms=data.get(\"write_timeout_ms\"),\r\n                chunk_size=data.get(\"chunk_size\"),\r\n                transport=data.get(\"transport\"),\r\n                handshake=data.get(\"handshake\"),\r\n            )\r\n            profiles[name.lower()] = profile\r\n        return cls(profiles)\r\n\r\n\r\n"
new = "        for name, data in payload.items():\r\n            if not isinstance(data, dict):\r\n                continue\r\n            command_defs: Dict[str, CommandDefinition] = {}\r\n            commands_payload = data.get(\"commands\")\r\n            if isinstance(commands_payload, dict):\r\n                for command_name, command_fields in commands_payload.items():\r\n                    if not isinstance(command_fields, dict):\r\n                        continue\r\n                    post_delay = command_fields.get(\"post_delay_s\", 0.0)\r\n                    try:\r\n                        post_delay_value = float(post_delay)\r\n                    except (TypeError, ValueError):\r\n                        post_delay_value = 0.0\r\n                    read_duration = command_fields.get(\"read_duration_s\")\r\n                    if read_duration is not None:\r\n                        try:\r\n                            read_duration_value = float(read_duration)\r\n                        except (TypeError, ValueError):\r\n                            read_duration_value = None\r\n                    else:\r\n                        read_duration_value = None\r\n                    command_defs[command_name] = CommandDefinition(\r\n                        name=command_name,\r\n                        description=command_fields.get(\"description\"),\r\n                        write_hex=command_fields.get(\"write_hex\"),\r\n                        write_ascii=command_fields.get(\"write_ascii\"),\r\n                        post_delay_s=post_delay_value,\r\n                        read_duration_s=read_duration_value,\r\n                        expect_hex=command_fields.get(\"expect_hex\"),\r\n                    )\r\n            profile = ProtocolProfile(\r\n                name=name,\r\n                description=data.get(\"description\"),\r\n                poll_hex=data.get(\"poll_hex\"),\r\n                poll_interval_s=data.get(\"poll_interval_s\"),\r\n                baud=data.get(\"baud\"),\r\n                data_bits=data.get(\"data_bits\"),\r\n                stop_bits=data.get(\"stop_bits\"),\r\n                parity=data.get(\"parity\"),\r\n                latency_timer_ms=data.get(\"latency_timer_ms\"),\r\n                read_timeout_ms=data.get(\"read_timeout_ms\"),\r\n                write_timeout_ms=data.get(\"write_timeout_ms\"),\r\n                chunk_size=data.get(\"chunk_size\"),\r\n                transport=data.get(\"transport\"),\r\n                handshake=data.get(\"handshake\"),\r\n                commands=command_defs,\r\n            )\r\n            profiles[name.lower()] = profile\r\n        return cls(profiles)\r\n\r\n\r\n"
if old not in text:
    raise SystemExit("for-loop block not found")
path.write_text(text.replace(old, new, 1), encoding='ascii')
